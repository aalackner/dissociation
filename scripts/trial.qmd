---
title: "Charge_density calculations"
author: Anna Lackner
date: today
format:
    html:
        embed-resources: true
        toc: true
        toc-depth: 3
        warning: true
        smooth-scroll: true
        code-fold: true
execute: 
  cache: true
---


```{python map of stations}
import pandas as pd
import geopandas as gpd
from shapely.geometry import Point
import plotly.express as px
import plotly.io as pio


# Path to the CSV file
file_path = "../results/r_py/pls_input.csv"

# Load the CSV file into a DataFrame
df = pd.read_csv(file_path)



# Step 2: Convert to GeoDataFrame with SWEREF 99TM CRS
geometry = [Point(xy) for xy in zip(df["stationCoordinateX"], df["stationCoordinateY"])]
stations_gdf = gpd.GeoDataFrame(df, geometry=geometry, crs="EPSG:3006")  # SWEREF 99TM CRS

# Step 3: Load Sweden shapefile and ensure it's in SWEREF 99TM
sweden_shapefile = "../input/shapefiles/Sweden.zip"
sweden_gdf = gpd.read_file(f"zip://{sweden_shapefile}")
sweden_gdf = sweden_gdf.to_crs("EPSG:3006")  # Ensure CRS matches SWEREF 99TM

sweden_gdf = sweden_gdf.to_crs("EPSG:4326")
stations_gdf = stations_gdf.to_crs("EPSG:4326")

# Extract coordinates from the GeoDataFrame for Plotly
stations_gdf["lon"] = stations_gdf.geometry.x
stations_gdf["lat"] = stations_gdf.geometry.y
stations_gdf["area_km2"] = stations_gdf["area_ARO_m2"] / (1000000)
# Convert Sweden boundary GeoDataFrame to GeoJSON for base map overlay
sweden_geojson = sweden_gdf.__geo_interface__

def map_stations():
  # Create an interactive map
  fig = px.scatter_map(
      stations_gdf,
      lat="lat",
      lon="lon",
      color="area_km2",  # Column to determine color
      color_continuous_scale="Viridis",  # Color scale (can be adjusted)
      zoom=3.5,  # Adjust zoom level as needed
      map_style="white-bg",
      title="Stations with more than 5 samples",
      custom_data=['mvm_id', "stationName", "area_km2","mean_annual_temp", "annual_precip" ]
  )

  fig = fig.update_traces(hovertemplate="MMV ID:  %{customdata[0]} <br>Station name: %{customdata[1]} <br>Area (km2): %{customdata[2]:.0f} <br>MAT (C): %{customdata[3]:.2f} <br>Annual Precipitation: %{customdata[4]:.0f}",
  marker=dict(size=10))


  # Overlay Sweden boundary
  fig.update_layout(
      map={
          "layers": [
              {
                  "source": sweden_geojson,
                  "type": "line",
                  "color": "black",
                  "line": {"width": 1},
              }
          ]
      },
      title={"x": 0.5},  # Center the title
      margin={"r": 0, "t": 40, "l": 0, "b": 0},  # Adjust margins
  )

  return(fig)


map_stations().write_html("../results/reports/maps/map_stations.html", full_html= False,include_plotlyjs = True )
```



```{r }
htmltools::includeHTML("../results/reports/maps/map_stations.html")
```


```{r}
#| echo: false
#| fig-width: 5 
#| fig-height: 4
#| fig-cap: Histogram of number of samples per station used in further analysis. There are 42 907 samples across 187 stations. In further analysis only stations with more than 5 samples were considered, reducing the number of stations to 173.
#| fig-alt: Histogram of number of samples per station
#| label: fig-hist_stations 

library(tidyverse)

data <- read.csv("../results/chemistry/complete.csv")
mvm_ids <- unique(data$mvm_id)
stations <- read.csv("../input/catchment_characteristics/catch_landuse(NMD).csv") %>% select(mvm_id, stationCoordinateX, stationCoordinateY, area_ARO_m2, stationName)

# Step 1: Count rows for each mvm_id
mvm_counts <- data %>%
  group_by(mvm_id) %>%
  summarise(sample_count = n())

# Step 2: Plot histogram of row counts
ggplot(mvm_counts, aes(x = sample_count)) +
  geom_histogram(binwidth = 12, fill = "skyblue", color = "black", alpha = 0.7) +
  labs(title = "",
       x = "Samples per station",
       y = "Frequency") +
  theme_minimal()

data %>% select(mvm_id) %>%
  group_by(mvm_id) %>%
  arrange(mvm_id) %>%       # Ensure data is ordered within each mvm_id (if needed)
  slice(1) %>%             # take the first row of each group
  ungroup() %>% left_join(stations) %>% left_join(mvm_counts) %>% filter(sample_count >= 5) -> stations

mvm_ids <- stations$mvm_id

data %>% filter(mvm_id %in% mvm_ids) -> data
```